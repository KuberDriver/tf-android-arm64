name: Build and Publish terraform and providers
on: #[ push, pull_request ]
  push:
    branches:
      - main
      - 'v[0-9]+.[0-9]+'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
env:
  tfversion: "0.14.11"

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.17.2' # The Go version to download (if necessary) and use.
      - run: go version

      # - name: Check out terraform repo
      #   uses: actions/checkout@v2
      #   with:
      #     repository: hashicorp/terraform
      #     path: ./terraform
      #     ref: ${{ tfversion }}
      
      - uses: robinraju/release-downloader@v1.3
        with:
          repository: "user/repo"
          tag: "${{ tfversion }}"
          zipBall: true
          filename: "terraform.zip"
      - run: unzip terraform.zip

      - name: Build terraform for GOOS=android GOARCH=arm64 
        run: |
          echo $GITHUB_WORKSPACE
          ls $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE/terraform
          git status
          #cat ./.go-version
          GOOS=android GOARCH=arm64 go build -o $GITHUB_WORKSPACE/bin/terraform          
          ls $GITHUB_WORKSPACE/bin

      - name: Check out azurerm provider repo
        uses: actions/checkout@v2
        with:
          repository: hashicorp/terraform-provider-azurerm
          path: ./terraform-provider-azurerm

      - name: Build terraform-provider-azurerm for GOOS=android GOARCH=arm64 
        run: |
          cd $GITHUB_WORKSPACE/terraform-provider-azurerm
          git status
          #cat ./.go-version
          GOOS=android GOARCH=arm64 go build -o $GITHUB_WORKSPACE/bin/terraform-provider-azurerm          
          ls $GITHUB_WORKSPACE/bin

      - name: Check out aws provider repo
        uses: actions/checkout@v2
        with:
          repository: hashicorp/terraform-provider-aws
          path: ./terraform-provider-aws

      - name: Build terraform-provider-aws for GOOS=android GOARCH=arm64 
        run: |
          cd $GITHUB_WORKSPACE/terraform-provider-aws
          git status
          #cat ./.go-version
          GOOS=android GOARCH=arm64 go build -o $GITHUB_WORKSPACE/bin/terraform-provider-aws          
          ls $GITHUB_WORKSPACE/bin

      - name: Build Artifacts # This would actually build your project, using zip for an example artifact
        run: |
          pwd
          ls
          zip -r $GITHUB_WORKSPACE/tf-artifact.zp ./bin --junk-paths
          ls
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./tf-artifact.zp
          asset_name: tf-artifact.zip
          asset_content_type: application/zip      
